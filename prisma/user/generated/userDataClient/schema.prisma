generator client {
  provider      = "prisma-client-js"
  output        = "./generated/userDataClient"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource userdb {
  provider = "mysql"
  url      = env("DATABASE_USER_URL")
}

model account {
  account_id Int    @id @default(autoincrement()) @map("account_id")
  username   String @map("name")
  password   String @map("password")

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  user_players user_player[]
  user_clubs   user_club[]
  user_info    user_info?

  @@map("account")
}

model user_player {
  account_id        Int
  player_id         Int
  count             Int
  enhancement_level Int     @default(0)
  account           account @relation(fields: [account_id], references: [account_id], onDelete: Cascade)

  @@id([account_id, player_id])
  @@map("user_player")
}

model user_club {
  account_id        Int     @map("account_id")
  player_id         Int     @map("player_id")
  enhancement_level Int     @default(0) @map("enhancement_level")
  account           account @relation(fields: [account_id], references: [account_id], onDelete: Cascade)

  @@id([account_id, player_id])
  @@map("user_club")
}

model user_info {
  account_id Int     @id @map("account_id")
  rank_score Int     @default(1000) @map("rank_score")
  wins       Int     @default(0) @map("wins")
  loses      Int     @default(0) @map("loses")
  draws      Int     @default(0) @map("draws")
  money      Int     @default(10000) @map("money")
  have_club  Boolean @default(false) @map("have_club")

  account account @relation(fields: [account_id], references: [account_id])

  @@map("user_info")
}
